# Script PowerShell pour lancer le projet YouTube ELT Pipeline
Write-Host "üöÄ D√©marrage du projet YouTube ELT Pipeline..." -ForegroundColor Green

# Fonction pour v√©rifier si un service est en cours d'ex√©cution
function Test-ServiceRunning {
    param($ContainerName)
    $result = docker ps --filter "name=$ContainerName" --format "table {{.Names}}" | Select-String $ContainerName
    return $null -ne $result
}

# √âtape 1: Cr√©er le r√©seau Docker
Write-Host "üì° Cr√©ation du r√©seau Docker 'airflow'..." -ForegroundColor Yellow
try {
    docker network create airflow 2>$null
    Write-Host "‚úÖ R√©seau cr√©√© avec succ√®s" -ForegroundColor Green
} catch {
    Write-Host "‚ÑπÔ∏è R√©seau d√©j√† existant" -ForegroundColor Cyan
}

# √âtape 2: D√©marrer MongoDB et Mongo Express
Write-Host "üçÉ D√©marrage de MongoDB et Mongo Express..." -ForegroundColor Yellow
docker compose -f docker-compose.override.yml up -d
if (Test-ServiceRunning "youtube_mongodb") {
    Write-Host "‚úÖ MongoDB d√©marr√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erreur lors du d√©marrage de MongoDB" -ForegroundColor Red
    exit 1
}

# √âtape 3: D√©marrer Airflow
Write-Host "üå™Ô∏è D√©marrage d'Airflow..." -ForegroundColor Yellow
docker compose up -d
Start-Sleep -Seconds 30

# V√©rifier si Airflow est d√©marr√©
if (Test-ServiceRunning "youtube_airflow_webserver") {
    Write-Host "‚úÖ Airflow webserver d√©marr√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚è≥ Airflow en cours de d√©marrage..." -ForegroundColor Yellow
}

if (Test-ServiceRunning "youtube_airflow_scheduler") {
    Write-Host "‚úÖ Airflow scheduler d√©marr√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚è≥ Airflow scheduler en cours de d√©marrage..." -ForegroundColor Yellow
}

# Afficher les URLs d'acc√®s
Write-Host "`nüéØ URLs d'acc√®s:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Airflow UI: http://localhost:8080 (admin/admin)" -ForegroundColor White
Write-Host "   ‚Ä¢ Mongo Express: http://localhost:8081" -ForegroundColor White

# Afficher les commandes utiles
Write-Host "`nüîß Commandes utiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Voir les logs Airflow: docker logs youtube_airflow_webserver" -ForegroundColor White
Write-Host "   ‚Ä¢ Voir les logs MongoDB: docker logs youtube_mongodb" -ForegroundColor White
Write-Host "   ‚Ä¢ Arr√™ter tout: docker compose down && docker compose -f docker-compose.override.yml down" -ForegroundColor White
Write-Host "   ‚Ä¢ D√©clencher un DAG: docker exec youtube_airflow_webserver airflow dags trigger <dag_id>" -ForegroundColor White

# Attendre que tous les services soient pr√™ts
Write-Host "`n‚è≥ Attente du d√©marrage complet des services..." -ForegroundColor Yellow
$maxWait = 120
$waited = 0
while ($waited -lt $maxWait) {
    $airflowReady = Test-ServiceRunning "youtube_airflow_webserver"
    $mongoReady = Test-ServiceRunning "youtube_mongodb"
    
    if ($airflowReady -and $mongoReady) {
        Write-Host "‚úÖ Tous les services sont pr√™ts!" -ForegroundColor Green
        break
    }
    
    Start-Sleep -Seconds 5
    $waited += 5
    Write-Host "." -NoNewline -ForegroundColor Yellow
}

if ($waited -ge $maxWait) {
    Write-Host "`n‚ö†Ô∏è Timeout atteint. V√©rifiez les logs des conteneurs." -ForegroundColor Yellow
}

Write-Host "`nüéâ Projet d√©marr√©! Acc√©dez √† Airflow sur http://localhost:8080" -ForegroundColor Green
