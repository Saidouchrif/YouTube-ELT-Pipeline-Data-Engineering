version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:7.0
    container_name: youtube_mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: youtube_data
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    networks:
      - youtube_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Express for web interface
  mongo-express:
    image: mongo-express:1.0.0
    container_name: youtube_mongo_express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
      ME_CONFIG_BASICAUTH: true
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - youtube_network

  # FastAPI YouTube Data Service
  youtube-api:
    image: python:3.11-slim
    container_name: youtube_fastapi
    restart: always
    ports:
      - "8000:8000"
    environment:
      - YOUTUBE_API_KEY=AIzaSyAr6B9F18e9vrR5_5sp4dDIVulnup3cqXc
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=password123
      - MONGO_DATABASE=youtube_data
      - PYTHONPATH=/app:/app/Keys
      - PYTHONUNBUFFERED=1
    volumes:
      - ./Keys:/app/Keys
      - ./data:/app/data
      - ./requirements-api.txt:/app/requirements-api.txt:ro
    working_dir: /app
    command: |
      bash -c "
      set -e
      echo 'Installation des dépendances...'
      pip install --no-cache-dir -r requirements-api.txt
      echo 'Démarrage de l API...'
      cd Keys/Api
      python -c 'import main; print(\"Module main importé avec succès\")'
      uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level info
      "
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - youtube_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/health\", timeout=5)'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow Standalone (SQLite backend)
  airflow-standalone:
    image: apache/airflow:2.7.3-python3.11
    container_name: youtube_airflow
    restart: always
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__CORE__PLUGINS_FOLDER=/opt/airflow/plugins
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key_here
      - YOUTUBE_API_KEY=AIzaSyAr6B9F18e9vrR5_5sp4dDIVulnup3cqXc
      - YOUTUBE_CHANNEL_HANDLE=MrBeast
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=password123
      - MONGO_DATABASE=youtube_data
      - DATA_STAGING_PATH=/data/staging/
      - PYTHONPATH=/opt/airflow
    volumes:
      - ./dags:/opt/airflow/dags:ro
      - ./plugins:/opt/airflow/plugins:ro
      - ./config:/opt/airflow/config:ro
      - ./soda:/opt/airflow/soda:ro
      - ./data:/data
      - airflow_data:/opt/airflow
    command: |
      bash -c "
      set -e
      echo 'Installation des dépendances Airflow...'
      pip install --no-cache-dir pymongo requests python-dotenv isodate
      echo 'Initialisation de la base de données Airflow...'
      airflow db init
      echo 'Création de l utilisateur admin...'
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true
      echo 'Démarrage du scheduler en arrière-plan...'
      airflow scheduler &
      echo 'Démarrage du webserver...'
      airflow webserver --port 8080
      "
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - youtube_network

volumes:
  mongodb_data:
    driver: local
  airflow_data:
    driver: local

networks:
  youtube_network:
    driver: bridge
